stages:
  - test
  - tagging
  - deploy

default:
  image: python:3.11
  artifacts:
    expire_in: 1 week

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/
    - .tox/

.create_venv: &create_venv
  - python --version
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate

.setup_dev_env: &setup_dev_env
  - pip install .[dev]
  - pip install .[test]

.extract_changelog_tag: &extract_changelog_tag
  - pip install 'changelog2version>=0.5.0,<1'
  - export CHANGELOG_TAG=$(changelog2version
    --changelog_file changelog.md
    --print |
    python -c "import sys, json; print(json.load(sys.stdin)['info']['version'])")
  - echo "Extracted tag from changelog ${CHANGELOG_TAG}"

test:
  stage: test
  image: $IMAGE
  before_script:
    - *create_venv
    - *setup_dev_env
  script:
    - tox -e test
    - coverage report -m
  parallel:
    matrix:
      - IMAGE: [
        'python:3.7',
        'python:3.8',
        'python:3.9',
        'python:3.10',
        'python:3.11'
      ]
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: reports/coverage/coverage.xml
      junit: reports/test_results/nose2-junit.xml
    paths:
      - reports/coverage/coverage.xml
      - reports/test_results/nose2-junit.xml
  except:
    - tags

build:
  stage: test
  before_script:
    - *create_venv
    - *setup_dev_env
  script:
    - tox -e build
    - pip install dist/*.whl
  artifacts:
    paths:
      - dist/*
  except:
    - tags

lint:
  stage: test
  before_script:
    - *create_venv
    - *setup_dev_env
  script:
    - tox -e lint
  artifacts:
    paths:
      - reports/sca/flake8.out
  except:
    - tags

docs:
  stage: test
  before_script:
    - *create_venv
    - *setup_dev_env
  script:
    - tox -e docs
  artifacts:
    paths:
      - docs/build/html
  except:
    - tags

tag-version:
  stage: tagging
  before_script:
    - *create_venv
    - *extract_changelog_tag
    - git config user.email info@brainelectronics.de
    - git config user.name TagBot
  script:
    - PROJECT_URL=$(echo $CI_PROJECT_URL | sed 's/https:\/\///')
    - export CHANGELOG_TAG_FULL=${CHANGELOG_TAG}-rc+build.${CI_PIPELINE_IID}
    - git tag ${CHANGELOG_TAG_FULL} -m "$(git show | head -n 3)"
    - git tag --list -n1 --sort=-creatordate | head -n 3
    # never use an access token if it is not protected + masked
    # ensure the the branch/tag it is running on is also protected
    - git push
      https://gitlab-ci-token:${GITLAB_ACCESS_TOKEN}@${PROJECT_URL}
      ${CHANGELOG_TAG_FULL}
  only:
    - main
  except:
    - tags

deploy:
  stage: deploy
  before_script:
    - *create_venv
    - *setup_dev_env
    - pip install 'twine>=4.0.1,<5'
  script:
    - tox -e build
    # never use an access token if it is not protected + masked
    # ensure the the branch/tag it is running on is also protected
    - TWINE_PASSWORD=${TWINE_PASSWORD}
      TWINE_USERNAME=__token__
      twine upload dist/*
  # rules:
  #   - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $CI_COMMIT_TAG
  only:
    - tags

pages:
  stage: deploy
  before_script:
    - *create_venv
    - *setup_dev_env
  script:
    - tox -e docs
    - mv docs/build/html/ public/
  artifacts:
    expire_in: never
    paths:
      - public
  # rules:
  #   - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) && $CI_COMMIT_TAG
  only:
    - tags
